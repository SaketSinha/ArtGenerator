name: Build and Deploy for Python Streamlit App

on:
push:
branches: [ main ]
pull_request:
branches: [ main ]

env:
SERVICE_NAME: streamlit
NAMESPACE: streamlitapp
CLUSTER_NAME: aiedgezop
CLUSTER_PROJECT: augmented-vim-462206-p7
GAR_PROJECT: augmented-vim-462206-p7
GAR_REGISTRY: zop-dev

jobs:
dockerize:
runs-on: ubuntu-latest
name: 🐳 Dockerize

outputs:
image: ${{ steps.output-image.outputs.image }}
steps:
- uses: actions/checkout@v4

# OPTIONAL: Validate Python build context (if you want to catch missing requirements etc. early)
- name: Set up Python
uses: actions/setup-python@v5
with:
python-version: '3.11'
- name: Install dependencies (optional)
run: |
python -m pip install --upgrade pip
pip install -r requirements.txt

- name: Login to GAR
uses: docker/login-action@v2
with:
registry: us-central1-docker.pkg.dev
username: _json_key
password: ${{ secrets.STREAMLIT_STREAMLITAPP_DEPLOYMENT_KEY }}

- name: Build and Push Docker Image to GAR
uses: docker/build-push-action@v2
with:
push: true
context: .
file: ./Dockerfile
tags:
us-central1-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
- id: output-image
run:
echo "image=echo us-central1-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

deployment:
runs-on: ubuntu-latest
needs: dockerize
name: 🚀 Deploy
env:
image: ${{ needs.dockerize.outputs.image }}

steps:
- name: Checkout Code
uses: actions/checkout@v2

- name: Authorize to GCP service account
uses: google-github-actions/auth@v2
with:
credentials_json: ${{ secrets.STREAMLIT_STREAMLITAPP_DEPLOYMENT_KEY }}

- name: Set up Cloud SDK
uses: google-github-actions/setup-gcloud@v2

- name: Update Kubectl component
run: gcloud --quiet components update kubectl

- name: Set GCloud Project and Fetch Cluster Credentials
run:
gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --region=us-central1 --project=${{ env.CLUSTER_PROJECT }}

- name: Update Deployment Image
run:
kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=${{ env.image }} --namespace ${{ env.NAMESPACE }}